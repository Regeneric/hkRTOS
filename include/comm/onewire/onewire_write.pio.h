// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// onewire_write //
// ------------- //

#define onewire_write_wrap_target 0
#define onewire_write_wrap 13
#define onewire_write_pio_version 1

static const uint16_t onewire_write_program_instructions[] = {
            //     .wrap_target
    0xe000, //  0: set    pins, 0
    0xe081, //  1: set    pindirs, 1
    0x80a0, //  2: pull   block
    0xe047, //  3: set    y, 7
    0x6021, //  4: out    x, 1
    0x0029, //  5: jmp    !x, 9
    0xe400, //  6: set    pins, 0                [4]
    0xe001, //  7: set    pins, 1
    0x000c, //  8: jmp    12
    0xff00, //  9: set    pins, 0                [31]
    0xbb42, // 10: nop                           [27]
    0xe001, // 11: set    pins, 1
    0x0084, // 12: jmp    y--, 4
    0x0000, // 13: jmp    0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program onewire_write_program = {
    .instructions = onewire_write_program_instructions,
    .length = 14,
    .origin = -1,
    .pio_version = onewire_write_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config onewire_write_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + onewire_write_wrap_target, offset + onewire_write_wrap);
    return c;
}
#endif

