; ------------------------------------------------------------------------
; dht11.pio  â€” PIO state machine to read DHT11/DHT22 sensor
; ------------------------------------------------------------------------

.program dht11
.side_set 1
    set pindirs, 1      side 1  ;   Set pin as OUTPUT
    pull block          side 1  ;   Pull timeout value from FIFO to osr; DATA HIGH
    mov x, osr          side 1  ;   Copy timeout value from osr to x

data_low:
    jmp x--, data_low   side 0  ;   Loop for 20ms; DATA LOW
    pull block          side 0  ;   Pull timeout value from FIFO to osr
    mov x, osr          side 0  ;   Copy timeout value from osr to x

data_high:
    jmp x--, data_high  side 1  ;   Loop for 30us; DATA HIGH

handshake:
    set pindirs, 0      side 0  ;   Set pin as INPUT
    wait 0 pin 0        side 0  ;   Wait for DATA LOW  (~80us)
    wait 1 pin 0        side 0  ;   Wait for DATA HIGH (~80us)
    set x, 4            side 0  ;   Read 5 bytes

loop:
    set y, 7            side 0  ;   Read 8 bits

data_read:
    wait 0 pin 0 [14]   side 0  ;   Wait for sensor START signal (50us low)
    wait 1 pin 0 [14]   side 0  ;   Wait for sensor BIT signal (25us or 75us high)
    nop [14]            side 0  ;   Wait for 15us (threshold between logical 0 and 1 is ~30us)

    in  pins, 1         side 0  ;   If line is still HIGH, shift 1 into isr, else shift 0
    jmp y--, data_read  side 0  ;   Read another bit until we've got all 8
    jmp x--, loop       side 0  ;   Read anotehr byte until we've got all 5

% c-sdk {
static inline void dht11_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config cfg = dht11_program_get_default_config(offset);
    sm_config_set_clkdiv(&cfg, ((float)clock_get_hz(clk_sys)/1000000.0f));  // 1 MHz aka 1 tick == 1us
    sm_config_set_in_pins(&cfg, pin);
    sm_config_set_sideset_pins(&cfg, pin);
    sm_config_set_set_pins(&cfg, pin, 1);
    sm_config_set_out_pins(&cfg, pin, 1);
    sm_config_set_in_shift(&cfg, false, true, 8);

    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);
    
    pio_sm_init(pio, sm, offset, &cfg);
}
%}